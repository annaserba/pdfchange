import { PaymentData } from '../types/PaymentData';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
export const parseReceiptText = (text: string): Partial<PaymentData> => {
  const data: Partial<PaymentData> = {};
  
  // –£–±–∏—Ä–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ç–µ–∫—Å—Ç—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
  let cleanedText = text;
  const ignoredTexts = [
    '–Ω–∞–¥–∞–Ω–Ω—è –ø–ª–∞—Ç–Ω–∏—Ö –ø–æ—Å–ª—É–≥',
    '–Ω–∞–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–Ω—ã—Ö —É—Å–ª—É–≥'
  ];
  
  ignoredTexts.forEach(ignored => {
    const regex = new RegExp(ignored, 'gi');
    if (regex.test(cleanedText)) {
      console.log(`üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: "${ignored}"`);
      cleanedText = cleanedText.replace(regex, '');
    }
  });
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  const normalizedText = cleanedText.replace(/\s+/g, ' ').trim();
  
  // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ PDF (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏):', normalizedText + '...');
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω - –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞!)
  const patterns = {
    sender: /(?:–≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫|–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å|–ø–ª–∞—Ç–µ–ª—å—â–∏–∫)[:\s]*([^,\n]+?)(?=\s*(?:–±–∞–Ω–∫|–∫–æ–¥|—î–¥—Ä–ø–æ—É|$))/i,
    payerBank: /(?:–±–∞–Ω–∫\s*–ø–ª–∞—Ç–Ω–∏–∫–∞|–±–∞–Ω–∫\s*–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞)[:\s]*([^,\n]+?)(?=\s*(?:–∫–æ–¥|—î–¥—Ä–ø–æ—É|$))/i,
    bankCode: /(?:–∫–æ–¥\s*–±–∞–Ω–∫—É|–∫–æ–¥\s*–±–∞–Ω–∫–∞|–º—Ñ–æ)[:\s]*(\d+)/i,
    receiptCode: /(?:–∫–æ–¥\s*–∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó|–∫–æ–¥\s*–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏|‚Ññ\s*–¥–æ–∫—É–º–µ–Ω—Ç–∞|–Ω–æ–º–µ—Ä\s*–¥–æ–∫—É–º–µ–Ω—Ç–∞|–∫–æ–¥\s*–¥–æ–∫—É–º–µ–Ω—Ç–∞)[:\s]*([^\s,\n]+)/i,
    paymentDate: /(?:–¥–∞—Ç–∞\s*–ø–ª–∞—Ç–µ–∂—É|–¥–∞—Ç–∞\s*–ø–ª–∞—Ç–µ–∂–∞|–¥–∞—Ç–∞)[:\s]*(\d{2}[.\/-]\d{2}[.\/-]\d{4})/i,
    valueDate: /(?:–¥–∞—Ç–∞\s*–≤–∞–ª—é—Ç—É–≤–∞–Ω–Ω—è|–¥–∞—Ç–∞\s*–≤–∞–ª—é—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)[:\s]*(\d{4}-\d{2}-\d{2}|[^,\n]+)/i,
    senderAccount: /(?:—Ä–∞—Ö—É–Ω–æ–∫\s*–≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞|—Ä–∞—Ö—É–Ω–æ–∫\s*–ø–ª–∞—Ç–Ω–∏–∫–∞|—Å—á–µ—Ç\s*–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞|—Å—á–µ—Ç\s*–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)[:\s]*([^\s,\n]+)/i,
    recipient: /(?:–æ–¥–µ—Ä–∂—É–≤–∞—á|–ø–æ–ª—É—á–∞—Ç–µ–ª—å)[:\s]*([^,\n]+?)(?=\s*(?:–±–∞–Ω–∫|—î–¥—Ä–ø–æ—É|—Ä–∞—Ö—É–Ω–æ–∫|$))/i,
    recipientBank: /(?:–±–∞–Ω–∫\s*–æ–¥–µ—Ä–∂—É–≤–∞—á–∞|–±–∞–Ω–∫\s*–ø–æ–ª—É—á–∞—Ç–µ–ª—è)[:\s]*([^\n]+?)(?=\s*(?:—î–¥—Ä–ø–æ—É|—Ä–∞—Ö—É–Ω–æ–∫|$))/i,
    // –Ñ–î–†–ü–û–£ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞ –ü–ï–†–ï–î –Ñ–î–†–ü–û–£ –ø–ª–∞—Ç–Ω–∏–∫–∞ (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π)
    edrpouRecipient: /(?:—î–¥—Ä–ø–æ—É\s*–æ–¥–µ—Ä–∂—É–≤–∞—á–∞|–µ–¥—Ä–ø–æ—É\s*–ø–æ–ª—É—á–∞—Ç–µ–ª—è|—î–¥—Ä–ø–æ—É\s*–æ—Ç—Ä–∏–º—É–≤–∞—á–∞|(?:—î–¥—Ä–ø–æ—É|–µ–¥—Ä–ø–æ—É)(?!\s*–ø–ª–∞—Ç–Ω–∏–∫–∞|\s*–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞))[:\s]*(\d+)/i,
    // –Ñ–î–†–ü–û–£ –ø–ª–∞—Ç–Ω–∏–∫–∞ (–º–µ–Ω–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ)
    edrpouPayer: /(?:—î–¥—Ä–ø–æ—É\s*–ø–ª–∞—Ç–Ω–∏–∫–∞|–µ–¥—Ä–ø–æ—É\s*–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞)[:\s]*(\d+)/i,
    recipientAccount: /(?:—Ä–∞—Ö—É–Ω–æ–∫\s*–æ–¥–µ—Ä–∂—É–≤–∞—á–∞|—Å—á–µ—Ç\s*–ø–æ–ª—É—á–∞—Ç–µ–ª—è)[:\s]*([^\s,\n]+)/i,
    paymentPurpose: /(?:–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è\s*–ø–ª–∞—Ç–µ–∂—É|–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ\s*–ø–ª–∞—Ç–µ–∂–∞)[:\s]*([^,\n]+?)(?=\s*(?:—Å—É–º–∞|—Å—É–º–º–∞|—Å–ø–ª–∞—á–µ–Ω–æ|—î–¥—Ä–ø–æ—É|–±–∞–Ω–∫|$))/i,
    paidAmount: /(?:—Å–ø–ª–∞—á–µ–Ω–æ|–æ–ø–ª–∞—á–µ–Ω–æ|—É–ø–ª–∞—á–µ–Ω–æ|—Å–ø–ª–∞—á–µ–Ω–æ\s*–≤—Å—å–æ–≥–æ|–æ–ø–ª–∞—á–µ–Ω–æ\s*–≤—Å–µ–≥–æ)[\s:]*(\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}|[^,\n]+?)(?=\s*(?:–¥–∞—Ç–∞|$))/i,
    amount: /(?:—Å—É–º–∞|—Å—É–º–º–∞)[\s:]+(\d+(?:[.,]\d{1,2})?)/i,
    commissionAmount: /(?:—Å—É–º–∞\s*–∫–æ–º—ñ—Å—ñ—ó|—Å—É–º–º–∞\s*–∫–æ–º–∏—Å—Å–∏–∏|–∫–æ–º—ñ—Å—ñ—è|–∫–æ–º–∏—Å—Å–∏—è)[\s:]+(\d+(?:[.,]\d{1,2})?)/i
  };

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–≤—É—Ö –ø–æ–ª–µ–π –Ñ–î–†–ü–û–£
  const edrpouMatches = [...normalizedText.matchAll(/(?:—î–¥—Ä–ø–æ—É|–µ–¥—Ä–ø–æ—É)[:\s]*(\d+)/gi)];
  if (edrpouMatches.length >= 2) {
    // –ü–µ—Ä–≤—ã–π –Ñ–î–†–ü–û–£ - –ø–ª–∞—Ç–Ω–∏–∫
    data.edrpouPayer = edrpouMatches[0][1].trim();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ edrpouPayer (–ø–µ—Ä–≤—ã–π –Ñ–î–†–ü–û–£): "${data.edrpouPayer}"`);
    
    // –í—Ç–æ—Ä–æ–π –Ñ–î–†–ü–û–£ - –æ–¥–µ—Ä–∂—É–≤–∞—á
    data.edrpouRecipient = edrpouMatches[1][1].trim();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ edrpouRecipient (–≤—Ç–æ—Ä–æ–π –Ñ–î–†–ü–û–£): "${data.edrpouRecipient}"`);
  } else if (edrpouMatches.length === 1) {
    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –Ñ–î–†–ü–û–£, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    const singleEdrpou = edrpouMatches[0][1].trim();
    const edrpouIndex = normalizedText.indexOf(edrpouMatches[0][0]);
    const beforeEdrpou = normalizedText.substring(Math.max(0, edrpouIndex - 100), edrpouIndex);
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥ –Ñ–î–†–ü–û–£ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞/–±–∞–Ω–∫–∞ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞ - —ç—Ç–æ –Ñ–î–†–ü–û–£ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞
    if (/(?:–æ–¥–µ—Ä–∂—É–≤–∞—á|–±–∞–Ω–∫\s*–æ–¥–µ—Ä–∂—É–≤–∞—á–∞|–ø–æ–ª—É—á–∞—Ç–µ–ª—å|–±–∞–Ω–∫\s*–ø–æ–ª—É—á–∞—Ç–µ–ª—è)/i.test(beforeEdrpou)) {
      data.edrpouRecipient = singleEdrpou;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ edrpouRecipient (–ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É): "${data.edrpouRecipient}"`);
    } else {
      data.edrpouPayer = singleEdrpou;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ edrpouPayer (–ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É): "${data.edrpouPayer}"`);
    }
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∏—Å–∫–ª—é—á–∞—è –Ñ–î–†–ü–û–£)
  Object.entries(patterns).forEach(([key, pattern]) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ñ–î–†–ü–û–£ –ø–æ–ª—è - –æ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
    if (key === 'edrpouPayer' || key === 'edrpouRecipient') {
      return;
    }
    
    const match = normalizedText.match(pattern);
    if (match && match[1]) {
      let value = match[1].trim();
      
      // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      value = value.replace(/[,;]+$/, '').trim();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π (—Å—É–º–º—ã) - —É–¥–∞–ª–µ–Ω–æ
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –ø–æ–ª–µ–π —Å –¥–∞—Ç–∞–º–∏
      if (['valueDate', 'paidAmount'].includes(key)) {
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
        value = value.replace(/\s+$/, '').trim();
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –ø–æ–ª–µ–π —Å—É–º–º
      if (['amount', 'commissionAmount'].includes(key)) {
        // –£–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        value = value.replace(/\s*(–≥—Ä–Ω\.?|UAH)\s*$/i, '').trim();
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        value = value.replace(',', '.');
        console.log(`üí∞ –û—á–∏—â–µ–Ω–æ –ø–æ–ª–µ —Å—É–º–º—ã ${key}: "${value}"`);
      }
      
        data[key as keyof PaymentData] = value;
    } else {
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
      const problemFields = ['valueDate', 'paidAmount', 'senderAccount', 'recipientBank', 'edrpouRecipient', 'paymentPurpose'];
      if (problemFields.includes(key)) {
        console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ ${key}, –ø–∞—Ç—Ç–µ—Ä–Ω: ${pattern}`);
      }
    }
  });

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  if (data.sender) {
    // –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–Ω–∫–µ
    data.sender = data.sender.replace(/–±–∞–Ω–∫\s*–ø–ª–∞—Ç–Ω–∏–∫–∞.*$/i, '').trim();
  }
  
  if (data.payerBank) {
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    data.payerBank = data.payerBank.replace(/–∫–æ–¥\s*–±–∞–Ω–∫—É.*$/i, '').trim();
  }
  if (data.recipient) {
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    data.recipient = data.recipient.replace(/–±–∞–Ω–∫\s*–æ–¥–µ—Ä–∂—É–≤–∞—á–∞.*$/i, '').trim();
  }

  console.log('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);


  return data;
};
