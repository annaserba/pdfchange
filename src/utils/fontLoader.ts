import { PDFDocument } from 'pdf-lib';
import fontkit from '@pdf-lib/fontkit';
import timesNewRomanFont from '../fonts/timesnewromanpsmt.ttf?url';
import timesNewRomanBoldFont from '../fonts/timesnewromanbold.ttf?url';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Times New Roman —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
export const loadFonts = async (pdfDoc: PDFDocument): Promise<{
  font: any;
  boldFont: any;
  supportsUkrainian: boolean;
}> => {
  console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Times New Roman —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞...');
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º fontkit –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TTF/OTF —à—Ä–∏—Ñ—Ç–æ–≤
  pdfDoc.registerFontkit(fontkit);
  console.log('‚úÖ Fontkit –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode —à—Ä–∏—Ñ—Ç–æ–≤');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Times New Roman (–æ–±—ã—á–Ω—ã–π)
    console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Times New Roman:', timesNewRomanFont);
    
    const fontResponse = await fetch(timesNewRomanFont);
    
    if (fontResponse.ok) {
      const fontBytes = await fontResponse.arrayBuffer();
      console.log(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${fontBytes.byteLength} –±–∞–π—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Times New Roman`);
     
      const regularFont = await pdfDoc.embedFont(fontBytes);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∂–∏—Ä–Ω—ã–π Times New Roman
      console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∂–∏—Ä–Ω—ã–π Times New Roman:', timesNewRomanBoldFont);
      
      const boldFontResponse = await fetch(timesNewRomanBoldFont);
      let boldFont = null;
      
      if (boldFontResponse.ok) {
        const boldFontBytes = await boldFontResponse.arrayBuffer();
        console.log(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${boldFontBytes.byteLength} –±–∞–π—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∂–∏—Ä–Ω–æ–≥–æ Times New Roman`);
        
        boldFont = await pdfDoc.embedFont(boldFontBytes);
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –∂–∏—Ä–Ω—ã–π Times New Roman');
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç');
      }
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ Times New Roman —à—Ä–∏—Ñ—Ç—ã (–æ–±—ã—á–Ω—ã–π + –∂–∏—Ä–Ω—ã–π)');
      console.log('üî§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã...');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ —à—Ä–∏—Ñ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
      try {
        const testText = '–ö—É—á–µ—Ä–µ–Ω–∫–æ –Ñ–≤–≥–µ–Ω—ñ–π';
        console.log(`üß™ –¢–µ—Å—Ç —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: "${testText}"`);
      } catch (testError) {
        console.warn('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —É–∫—Ä–∞–∏–Ω—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏:', testError);
      }
      
      return { 
        font: regularFont, 
        boldFont: boldFont, 
        supportsUkrainian: true 
      };
    } else {
      console.error(`‚ùå HTTP ${fontResponse.status} –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞`);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π Times New Roman: HTTP ${fontResponse.status}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Times New Roman:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π Times New Roman. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ /src/fonts/timesnewromanpsmt.ttf');
  }
};
