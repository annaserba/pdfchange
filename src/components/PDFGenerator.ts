import { PDFDocument, rgb } from 'pdf-lib';
import { PaymentData } from '../types/PaymentData';
import { loadFonts } from '../utils/fontLoader';
import { drawUkrainianText } from '../utils/textRenderer';
import { extractDataWithPositionsFromPDF } from '../utils/pdfExtractor';

export const generateReceiptPDF = async (
  formData: PaymentData,
  existingPdfBytes?: Uint8Array
): Promise<{ success: boolean; message: string; blob?: Blob }> => {
  try {
    // –†–∞–±–æ—Ç–∞–µ–º –¢–û–õ–¨–ö–û —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º PDF
    if (!existingPdfBytes || existingPdfBytes.length === 0) {
      return { 
        success: false, 
        message: '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —ñ—Å–Ω—É—é—á–∏–π PDF —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è' 
      };
    }

    console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ PDF —Ñ–∞–π–ª–∞');
    console.log('–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ PDF:', existingPdfBytes.length, '–±–∞–π—Ç');

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è detached ArrayBuffer
    const pdfBytesCopy = new Uint8Array(existingPdfBytes.length);
    pdfBytesCopy.set(existingPdfBytes);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º PDF –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    const pdfHeader = new TextDecoder().decode(pdfBytesCopy.slice(0, 8));
    if (!pdfHeader.startsWith('%PDF-')) {
      return { 
        success: false, 
        message: '–§–∞–π–ª –Ω–µ —î –∫–æ—Ä–µ–∫—Ç–Ω–∏–º PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º' 
      };
    }
    
    const pdfDoc = await PDFDocument.load(pdfBytesCopy);
    console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π PDF —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —à—Ä–∏—Ñ—Ç—ã –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ PDF
    const { font } = await loadFonts(pdfDoc);
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–æ–±—ã—á–Ω—ã–π + –∂–∏—Ä–Ω—ã–π)');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    const pages = pdfDoc.getPages();
    const page = pages.length > 0 ? pages[0] : pdfDoc.addPage([595.28, 841.89]);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏–∑ PDF –¥–ª—è —Ç–æ—á–Ω–æ–π –∑–∞–º–µ–Ω—ã
    let originalDataWithPositions: Array<{field: string, value: string, x: number, y: number, width: number, height: number}> = [];
    try {
      console.log('–ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏–∑ PDF –¥–ª—è –∑–∞–º–µ–Ω—ã');
      originalDataWithPositions = await extractDataWithPositionsFromPDF(pdfBytesCopy);
      console.log('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏–∑ PDF:', originalDataWithPositions);
    } catch (extractError) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–∑–∏—Ü–∏—è–º–∏:', extractError);
      return { 
        success: false, 
        message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ PDF —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ.' 
      };
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ PDF, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–µ
    console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ PDF');
    
    try {
        console.log('PDF —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –∑–∞–º–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        
        // –£–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∑–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        
        console.log('–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É –í–°–ï–• –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π');
        
        // –ó–∞–º–µ–Ω—è–µ–º –í–°–ï –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ:
        // 1. –ë—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º PDF
        // 2. –ò–º–µ—é—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–µ
        
        let replacementCount = 0;
        
        originalDataWithPositions.forEach(({ field, value: originalValue, x, y, width, height }) => {
          const fieldKey = field as keyof PaymentData;
          const newValue = formData[fieldKey];
          
          // –ó–ê–ú–ï–ù–Ø–ï–ú –í–°–ï –ó–ù–ê–ß–ï–ù–ò–Ø –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π:
          // 1. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          // 2. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ PDF
          
          const hasNewValue = newValue && newValue.trim();
          const hasOriginalValue = originalValue && originalValue.trim();
          
          if (hasNewValue && hasOriginalValue) {
            console.log(`‚úÖ –ó–ê–ú–ï–ù–Ø–ï–ú –ø–æ–ª–µ ${field}:`);
            console.log(`   –û—Ä–∏–≥–∏–Ω–∞–ª: "${originalValue}"`);
            console.log(`   –ù–æ–≤–æ–µ: "${newValue}"`);
            console.log(`   –ü–æ–∑–∏—Ü–∏—è: (${x}, ${y}) —Ä–∞–∑–º–µ—Ä: ${width}x${height}`);
            
            replacementCount++;
            
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            console.log(`üìù –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ: "${newValue}" –≤ –ø–æ–∑–∏—Ü–∏–∏ (${x}, ${y})`);
            
            if (newValue) {
              drawUkrainianText(page, newValue, {
                x: x,
                y: y,
                size: 10,
                color: rgb(0, 0, 0)
              }, font);
              
              console.log(`‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω: "${newValue}"`);
            }
          } else {
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–ø—É—Å–∫–∞
            if (!hasNewValue) {
              console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ ${field} - –Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è`);
            } else if (!hasOriginalValue) {
              console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–µ ${field} - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º PDF`);
            }
          }
        });
        
        console.log(`üéØ –£–º–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ–π: ${replacementCount} –∏–∑ ${originalDataWithPositions.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö`);
        
        if (replacementCount === 0) {
          console.log('‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ –ø–æ–ª–µ –Ω–µ –±—ã–ª–æ –∑–∞–º–µ–Ω–µ–Ω–æ - –≤–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–ª–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ PDF');
        }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PDF:', error);
      throw error;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF
    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([new Uint8Array(pdfBytes)], { type: 'application/pdf' });

    const message = 'PDF —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ! –í–∏–∫–æ–Ω–∞–Ω–æ —Ç–æ—á–∫–æ–≤—É –∑–∞–º—ñ–Ω—É —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω–∏—Ö –ø–æ–ª—ñ–≤ —É —ó—Ö –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –≤—Å—ñ—Ö –ø–µ—á–∞—Ç–æ–∫, QR-–∫–æ–¥—ñ–≤ —Ç–∞ –ø—ñ–¥–ø–∏—Å—ñ–≤.';

    return {
      success: true,
      message,
      blob
    };

  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
    return {
      success: false,
      message: `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ PDF: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`
    };
  }
};
