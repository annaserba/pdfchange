import fs from 'fs';
import path from 'path';
import { Page } from '@playwright/test';

export class PDFScreenshot {
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç PDF —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É—è –±—Ä–∞—É–∑–µ—Ä
   */
  static async createPDFScreenshot(
    page: Page, 
    pdfPath: string, 
    outputPath: string
  ): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–∞
      if (!fs.existsSync(pdfPath)) {
        console.error(`PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${pdfPath}`);
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const outputDir = path.dirname(outputPath);
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      const pdfUrl = `file://${path.resolve(pdfPath)}`;
      await page.goto(pdfUrl);
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ PDF
      await page.waitForTimeout(3000);
      
      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await page.screenshot({
        path: outputPath,
        fullPage: true,
        type: 'png'
      });

      console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç PDF —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
      return true;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ PDF: ${error}`);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–æ –∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  static async createBeforeAfterScreenshots(
    page: Page,
    originalPdfPath: string,
    modifiedPdfPath: string,
    screenshotsDir: string,
    testName: string
  ): Promise<{
    beforePath: string;
    afterPath: string;
    success: boolean;
  }> {
    const timestamp = Date.now();
    const beforePath = path.join(screenshotsDir, `${testName}-before-${timestamp}.png`);
    const afterPath = path.join(screenshotsDir, `${testName}-after-${timestamp}.png`);

    try {
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
      if (!fs.existsSync(screenshotsDir)) {
        fs.mkdirSync(screenshotsDir, { recursive: true });
      }

      // –°–∫—Ä–∏–Ω—à–æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ PDF
      console.log('üì∏ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ PDF...');
      const beforeSuccess = await this.createPDFScreenshot(page, originalPdfPath, beforePath);

      // –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ PDF
      console.log('üì∏ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ PDF...');
      const afterSuccess = await this.createPDFScreenshot(page, modifiedPdfPath, afterPath);

      const success = beforeSuccess && afterSuccess;

      if (success) {
        console.log('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–æ –∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        console.log(`   –î–æ: ${beforePath}`);
        console.log(`   –ü–æ—Å–ª–µ: ${afterPath}`);
      }

      return {
        beforePath,
        afterPath,
        success
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${error}`);
      return {
        beforePath,
        afterPath,
        success: false
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (side-by-side)
   */
  static async createComparisonScreenshot(
    page: Page,
    beforeImagePath: string,
    afterImagePath: string,
    comparisonPath: string
  ): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (!fs.existsSync(beforeImagePath) || !fs.existsSync(afterImagePath)) {
        console.error('–ò—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const comparisonHtml = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>PDF Comparison</title>
          <style>
            body {
              margin: 0;
              padding: 20px;
              font-family: Arial, sans-serif;
              background: #f5f5f5;
            }
            .comparison-container {
              display: flex;
              gap: 20px;
              justify-content: center;
              align-items: flex-start;
            }
            .pdf-container {
              background: white;
              border: 2px solid #ddd;
              border-radius: 8px;
              padding: 15px;
              box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            }
            .pdf-container h3 {
              margin: 0 0 15px 0;
              text-align: center;
              color: #333;
            }
            .pdf-container.before h3 {
              color: #e74c3c;
            }
            .pdf-container.after h3 {
              color: #27ae60;
            }
            img {
              max-width: 600px;
              height: auto;
              border: 1px solid #ccc;
              border-radius: 4px;
            }
            .header {
              text-align: center;
              margin-bottom: 30px;
            }
            .header h1 {
              color: #2c3e50;
              margin-bottom: 10px;
            }
            .header p {
              color: #7f8c8d;
              font-size: 14px;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>üìä PDF Comparison</h1>
            <p>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ PDF –¥–æ –∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π</p>
          </div>
          <div class="comparison-container">
            <div class="pdf-container before">
              <h3>üî¥ –î–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π</h3>
              <img src="file://${path.resolve(beforeImagePath)}" alt="PDF –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π" />
            </div>
            <div class="pdf-container after">
              <h3>üü¢ –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π</h3>
              <img src="file://${path.resolve(afterImagePath)}" alt="PDF –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π" />
            </div>
          </div>
        </body>
        </html>
      `;

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
      const tempHtmlPath = path.join(path.dirname(comparisonPath), 'temp-comparison.html');
      fs.writeFileSync(tempHtmlPath, comparisonHtml);

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      await page.goto(`file://${path.resolve(tempHtmlPath)}`);
      await page.waitForTimeout(2000);

      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      await page.screenshot({
        path: comparisonPath,
        fullPage: true,
        type: 'png'
      });

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
      fs.unlinkSync(tempHtmlPath);

      console.log(`‚úÖ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω: ${comparisonPath}`);
      return true;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${error}`);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
   */
  static async createFullScreenshotSet(
    page: Page,
    originalPdfPath: string,
    modifiedPdfPath: string,
    testName: string
  ): Promise<{
    beforePath: string;
    afterPath: string;
    comparisonPath: string;
    success: boolean;
  }> {
    const screenshotsDir = path.join(__dirname, '..', 'screenshots');
    const timestamp = Date.now();
    
    const beforePath = path.join(screenshotsDir, `${testName}-before-${timestamp}.png`);
    const afterPath = path.join(screenshotsDir, `${testName}-after-${timestamp}.png`);
    const comparisonPath = path.join(screenshotsDir, `${testName}-comparison-${timestamp}.png`);

    try {
      // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–æ –∏ –ø–æ—Å–ª–µ
      const { success: screenshotsSuccess } = await this.createBeforeAfterScreenshots(
        page,
        originalPdfPath,
        modifiedPdfPath,
        screenshotsDir,
        testName
      );

      if (!screenshotsSuccess) {
        return { beforePath, afterPath, comparisonPath, success: false };
      }

      // –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
      const comparisonSuccess = await this.createComparisonScreenshot(
        page,
        beforePath,
        afterPath,
        comparisonPath
      );

      return {
        beforePath,
        afterPath,
        comparisonPath,
        success: comparisonSuccess
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: ${error}`);
      return {
        beforePath,
        afterPath,
        comparisonPath,
        success: false
      };
    }
  }
}
