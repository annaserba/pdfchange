import { test, expect } from '@playwright/test';
import path from 'path';
import fs from 'fs';

test.describe('–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF', () => {
  const realPdfPath = path.join(__dirname, 'fixtures', 'real-receipt.pdf');
  const screenshotsDir = path.join(__dirname, 'screenshots');
  const downloadsDir = path.join(__dirname, 'downloads');

  test.beforeAll(async () => {
    [screenshotsDir, downloadsDir].forEach(dir => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
    });
  });

  test.beforeEach(async ({ page }) => {
    await page.goto('/');
    await page.waitForLoadState('networkidle');
  });

  test('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞—Ç—å PDF –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏', async ({ page }) => {
    const timestamp = Date.now();

    // –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const initialScreenshot = path.join(screenshotsDir, `download-initial-${timestamp}.png`);
    await page.screenshot({ path: initialScreenshot, fullPage: true });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º PDF —Ñ–∞–π–ª
    const fileInput = page.locator('input[type="file"]');
    await fileInput.setInputFiles(realPdfPath);
    await page.waitForTimeout(5000);

    // –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const loadedScreenshot = path.join(screenshotsDir, `download-loaded-${timestamp}.png`);
    await page.screenshot({ path: loadedScreenshot, fullPage: true });

    // –ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const textInputs = page.locator('input[type="text"]');
    await textInputs.nth(0).fill('–¢–µ—Å—Ç –°–∫–∞—á–∏–≤–∞–Ω–∏—è PDF');

    // –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const modifiedScreenshot = path.join(screenshotsDir, `download-modified-${timestamp}.png`);
    await page.screenshot({ path: modifiedScreenshot, fullPage: true });

    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const downloadButton = page.locator('button').filter({ 
      hasText: /PDF/i 
    }).first();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞
    await expect(downloadButton).toBeVisible();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const downloadPromise = page.waitForEvent('download');

    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
    await downloadButton.click();

    // –ñ–¥–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const download = await downloadPromise;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    const downloadedPath = path.join(downloadsDir, `simple-download-${timestamp}.pdf`);
    await download.saveAs(downloadedPath);

    // –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const afterDownloadScreenshot = path.join(screenshotsDir, `download-completed-${timestamp}.png`);
    await page.screenshot({ path: afterDownloadScreenshot, fullPage: true });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    expect(fs.existsSync(downloadedPath)).toBeTruthy();

    const stats = fs.statSync(downloadedPath);
    expect(stats.size).toBeGreaterThan(1000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º PDF –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const buffer = fs.readFileSync(downloadedPath);
    const header = buffer.slice(0, 8).toString();
    expect(header.startsWith('%PDF-')).toBeTruthy();

    console.log('‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω:');
    console.log(`   –ò–º—è —Ñ–∞–π–ª–∞: ${download.suggestedFilename()}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç`);
    console.log(`   PDF –≤–µ—Ä—Å–∏—è: ${header}`);
    console.log(`   –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: ${path.basename(downloadedPath)}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    const screenshots = [initialScreenshot, loadedScreenshot, modifiedScreenshot, afterDownloadScreenshot];
    screenshots.forEach(screenshot => {
      expect(fs.existsSync(screenshot)).toBeTruthy();
      const screenshotStats = fs.statSync(screenshot);
      console.log(`   –°–∫—Ä–∏–Ω—à–æ—Ç: ${path.basename(screenshot)} (${screenshotStats.size} –±–∞–π—Ç)`);
    });
  });

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ PDF', async ({ page }) => {
    const timestamp = Date.now();

    // –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    const fileInput = page.locator('input[type="file"]');
    await fileInput.setInputFiles(realPdfPath);
    await page.waitForTimeout(3000);

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const textInputs = page.locator('input[type="text"]');
    await textInputs.nth(0).fill('–ü—Ä–æ–≤–µ—Ä–∫–∞ –°–≤–æ–π—Å—Ç–≤');

    // –°–∫–∞—á–∏–≤–∞–µ–º
    const downloadPromise = page.waitForEvent('download');
    const downloadButton = page.locator('button').filter({ hasText: /PDF/i }).first();
    await downloadButton.click();

    const download = await downloadPromise;
    const testPath = path.join(downloadsDir, `properties-test-${timestamp}.pdf`);
    await download.saveAs(testPath);

    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const stats = fs.statSync(testPath);
    const buffer = fs.readFileSync(testPath);

    // –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    expect(stats.size).toBeGreaterThan(500);
    expect(stats.size).toBeLessThan(50 * 1024 * 1024);

    // PDF –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const header = buffer.slice(0, 8).toString();
    expect(header.startsWith('%PDF-')).toBeTruthy();

    // PDF —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    const pdfContent = buffer.toString('latin1');
    expect(pdfContent).toContain('obj');
    expect(pdfContent).toContain('endobj');
    expect(pdfContent).toContain('%%EOF');

    // –ò–º—è —Ñ–∞–π–ª–∞
    expect(download.suggestedFilename()).toMatch(/\.pdf$/);
    expect(download.suggestedFilename()).toContain('edited');

    console.log('‚úÖ –°–≤–æ–π—Å—Ç–≤–∞ PDF –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:');
    console.log(`   –†–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã)`);
    console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${header} (–≤–∞–ª–∏–¥–Ω—ã–π)`);
    console.log(`   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: —Å–æ–¥–µ—Ä–∂–∏—Ç obj/endobj/%%EOF`);
    console.log(`   –ò–º—è —Ñ–∞–π–ª–∞: ${download.suggestedFilename()}`);
  });

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏', async ({ page }) => {
    const timestamp = Date.now();

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    const fileInput = page.locator('input[type="file"]');
    await fileInput.setInputFiles(realPdfPath);
    await page.waitForTimeout(3000);

    const textInputs = page.locator('input[type="text"]');
    await textInputs.nth(0).fill('–û—Ç—á–µ—Ç –æ –°–∫–∞—á–∏–≤–∞–Ω–∏–∏');

    const downloadPromise = page.waitForEvent('download');
    const downloadButton = page.locator('button').filter({ hasText: /PDF/i }).first();
    await downloadButton.click();

    const download = await downloadPromise;
    const reportPdfPath = path.join(downloadsDir, `report-${timestamp}.pdf`);
    await download.saveAs(reportPdfPath);

    // –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
    const reportHtml = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ PDF</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background: #f5f5f5;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .success {
            color: #27ae60;
            font-weight: bold;
        }
        .info {
            background: #e8f4fd;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }
        .stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }
        .stat-box {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
        }
        .stat-box h4 {
            margin: 0 0 10px 0;
            color: #2c3e50;
        }
        .stat-box p {
            margin: 0;
            font-size: 1.2em;
            color: #3498db;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF</h1>
            <p>–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}</p>
        </div>
        
        <div class="info">
            <h3>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="success">–£–°–ü–ï–®–ù–û</span></p>
            <p><strong>–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:</strong> <span class="success">–†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</span></p>
        </div>

        <div class="stats">
            <div class="stat-box">
                <h4>üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π PDF</h4>
                <p>${Math.round(fs.statSync(realPdfPath).size / 1024)} KB</p>
            </div>
            <div class="stat-box">
                <h4>üìÑ –°–∫–∞—á–∞–Ω–Ω—ã–π PDF</h4>
                <p>${Math.round(fs.statSync(reportPdfPath).size / 1024)} KB</p>
            </div>
        </div>

        <div class="info">
            <h3>üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</h3>
            <ul>
                <li>‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç</li>
                <li>‚úÖ PDF —Ñ–∞–π–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è</li>
                <li>‚úÖ –§–∞–π–ª –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä</li>
                <li>‚úÖ PDF –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞–ª–∏–¥–µ–Ω</li>
                <li>‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ PDF –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞</li>
                <li>‚úÖ –ò–º—è —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É</li>
            </ul>
        </div>

        <div class="info">
            <h3>üìÅ –î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞:</h3>
            <p><strong>–ò–º—è —Ñ–∞–π–ª–∞:</strong> ${download.suggestedFilename()}</p>
            <p><strong>–†–∞–∑–º–µ—Ä:</strong> ${fs.statSync(reportPdfPath).size} –±–∞–π—Ç</p>
            <p><strong>–ü—É—Ç—å:</strong> ${reportPdfPath}</p>
        </div>
    </div>
</body>
</html>`;

    const htmlReportPath = path.join(screenshotsDir, `download-report-${timestamp}.html`);
    fs.writeFileSync(htmlReportPath, reportHtml);

    expect(fs.existsSync(htmlReportPath)).toBeTruthy();
    expect(fs.existsSync(reportPdfPath)).toBeTruthy();

    console.log('‚úÖ –û—Ç—á–µ—Ç –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω:');
    console.log(`   HTML –æ—Ç—á–µ—Ç: ${path.basename(htmlReportPath)}`);
    console.log(`   PDF —Ñ–∞–π–ª: ${path.basename(reportPdfPath)}`);
    console.log(`   –†–∞–∑–º–µ—Ä PDF: ${fs.statSync(reportPdfPath).size} –±–∞–π—Ç`);
  });
});
