import { test, expect } from '@playwright/test';
import path from 'path';
import fs from 'fs';

test.describe('–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF', () => {
  const realPdfPath = path.join(__dirname, 'fixtures', 'real-receipt.pdf');
  const downloadsDir = path.join(__dirname, 'downloads');
  const screenshotsDir = path.join(__dirname, 'screenshots');

  test.beforeAll(async () => {
    [downloadsDir, screenshotsDir].forEach(dir => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
    });
  });

  test.beforeEach(async ({ page }) => {
    await page.goto('/');
    await page.waitForLoadState('networkidle');
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF', async ({ page }) => {
    const timestamp = Date.now();

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä—è–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    const directEditMessages: string[] = [];
    page.on('console', msg => {
      const text = msg.text();
      if (text.includes('–ø—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') || 
          text.includes('–≠–¢–ê–ü 1') ||
          text.includes('PDF —Ñ–æ—Ä–º') ||
          text.includes('–∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') ||
          text.includes('–ê–Ω–∞–ª–∏–∑ PDF')) {
        directEditMessages.push(text);
      }
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º PDF
    const fileInput = page.locator('input[type="file"]');
    await fileInput.setInputFiles(realPdfPath);
    await page.waitForTimeout(5000);

    // –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const loadedScreenshot = path.join(screenshotsDir, `direct-edit-loaded-${timestamp}.png`);
    await page.screenshot({ path: loadedScreenshot, fullPage: true });

    // –ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const directEditData = {
      sender: '–ü–†–Ø–ú–û–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–°–¢',
      recipient: '–¢–µ—Å—Ç –ü–æ–ª—É—á–∞—Ç–µ–ª—å',
      amount: '999.99'
    };

    const textInputs = page.locator('input[type="text"]');
    await textInputs.nth(0).fill(directEditData.sender);
    
    if (await textInputs.nth(1).isVisible()) {
      await textInputs.nth(1).fill(directEditData.recipient);
    }

    // –ò—â–µ–º –ø–æ–ª–µ —Å—É–º–º—ã
    const inputCount = await textInputs.count();
    if (inputCount > 2) {
      await textInputs.nth(inputCount - 2).fill(directEditData.amount);
    }

    // –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    const filledScreenshot = path.join(screenshotsDir, `direct-edit-filled-${timestamp}.png`);
    await page.screenshot({ path: filledScreenshot, fullPage: true });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Å –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const downloadPromise = page.waitForEvent('download');
    const generateButton = page.locator('button').filter({ hasText: /PDF/i }).first();
    await generateButton.click();

    const download = await downloadPromise;
    const directEditPdfPath = path.join(downloadsDir, `direct-edit-test-${timestamp}.pdf`);
    await download.saveAs(directEditPdfPath);

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await page.waitForTimeout(3000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expect(fs.existsSync(directEditPdfPath)).toBeTruthy();

    const stats = fs.statSync(directEditPdfPath);
    expect(stats.size).toBeGreaterThan(1000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º PDF –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const buffer = fs.readFileSync(directEditPdfPath);
    const header = buffer.slice(0, 8).toString();
    expect(header.startsWith('%PDF-')).toBeTruthy();

    console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF:');
    console.log(`   –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${path.basename(directEditPdfPath)}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç`);
    console.log(`   PDF –≤–µ—Ä—Å–∏—è: ${header}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä—è–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${directEditMessages.length}`);

    // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä—è–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    if (directEditMessages.length > 0) {
      console.log('üìã –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä—è–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:');
      directEditMessages.forEach((msg, index) => {
        console.log(`   ${index + 1}. ${msg}`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–ª–∞—Å—å –ø—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const hasDirectEditAttempt = directEditMessages.some(msg => 
      msg.includes('–≠–¢–ê–ü 1') || 
      msg.includes('–ø—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') ||
      msg.includes('–ê–Ω–∞–ª–∏–∑ PDF')
    );

    expect(hasDirectEditAttempt).toBeTruthy();
    console.log(`   –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${hasDirectEditAttempt ? '–î–∞' : '–ù–µ—Ç'}`);
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ PDF —Å—Ç—Ä—É–∫—Ç—É—Ä—ã', async ({ page }) => {
    const timestamp = Date.now();

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ PDF
    const analysisMessages: string[] = [];
    page.on('console', msg => {
      const text = msg.text();
      if (text.includes('–ê–Ω–∞–ª–∏–∑ PDF') || 
          text.includes('PDF —Ñ–æ—Ä–º') ||
          text.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥') ||
          text.includes('—Å—Ç—Ä—É–∫—Ç—É—Ä—É PDF')) {
        analysisMessages.push(text);
      }
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º PDF –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    const fileInput = page.locator('input[type="file"]');
    await fileInput.setInputFiles(realPdfPath);
    await page.waitForTimeout(5000);

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
    const textInputs = page.locator('input[type="text"]');
    await textInputs.nth(0).fill('–ê–Ω–∞–ª–∏–∑ PDF');

    const downloadPromise = page.waitForEvent('download');
    const generateButton = page.locator('button').filter({ hasText: /PDF/i }).first();
    await generateButton.click();

    const download = await downloadPromise;
    const analysisPdfPath = path.join(downloadsDir, `pdf-analysis-${timestamp}.pdf`);
    await download.saveAs(analysisPdfPath);

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
    await page.waitForTimeout(3000);

    console.log('üìä –ê–Ω–∞–ª–∏–∑ PDF —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:');
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∞: ${analysisMessages.length}`);
    
    if (analysisMessages.length > 0) {
      console.log('   –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:');
      analysisMessages.forEach((msg, index) => {
        console.log(`     ${index + 1}. ${msg}`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
    const hasAnalysis = analysisMessages.some(msg => 
      msg.includes('–ê–Ω–∞–ª–∏–∑ PDF') || msg.includes('—Å—Ç—Ä—É–∫—Ç—É—Ä—É PDF')
    );

    expect(hasAnalysis).toBeTruthy();
    expect(fs.existsSync(analysisPdfPath)).toBeTruthy();
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', async ({ page }) => {
    const timestamp = Date.now();

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–µ—Ç–æ–¥–∞—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const methodMessages: string[] = [];
    page.on('console', msg => {
      const text = msg.text();
      if (text.includes('–ú–ï–¢–û–î') || 
          text.includes('—Ñ–æ—Ä–º') ||
          text.includes('–∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞') ||
          text.includes('–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏') ||
          text.includes('–∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')) {
        methodMessages.push(text);
      }
    });

    const fileInput = page.locator('input[type="file"]');
    await fileInput.setInputFiles(realPdfPath);
    await page.waitForTimeout(5000);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    const methodTestData = {
      sender: '–¢–µ—Å—Ç –ú–µ—Ç–æ–¥–æ–≤ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      recipient: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ú–µ—Ç–æ–¥–æ–≤',
      purpose: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–º—ã, –∑–∞–º–µ–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏'
    };

    const textInputs = page.locator('input[type="text"]');
    await textInputs.nth(0).fill(methodTestData.sender);
    
    if (await textInputs.nth(1).isVisible()) {
      await textInputs.nth(1).fill(methodTestData.recipient);
    }

    const textarea = page.locator('textarea');
    if (await textarea.isVisible()) {
      await textarea.fill(methodTestData.purpose);
    }

    const downloadPromise = page.waitForEvent('download');
    const generateButton = page.locator('button').filter({ hasText: /PDF/i }).first();
    await generateButton.click();

    const download = await downloadPromise;
    const methodsPdfPath = path.join(downloadsDir, `methods-test-${timestamp}.pdf`);
    await download.saveAs(methodsPdfPath);

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
    await page.waitForTimeout(5000);

    console.log('üîß –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π –æ –º–µ—Ç–æ–¥–∞—Ö: ${methodMessages.length}`);
    
    if (methodMessages.length > 0) {
      console.log('   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã:');
      methodMessages.forEach((msg, index) => {
        console.log(`     ${index + 1}. ${msg}`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –∏—Å–ø—Ä–æ–±–æ–≤–∞–Ω—ã
    const hasMethodAttempts = methodMessages.some(msg => 
      msg.includes('–ú–ï–¢–û–î') || msg.includes('–∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ')
    );

    expect(hasMethodAttempts).toBeTruthy();
    expect(fs.existsSync(methodsPdfPath)).toBeTruthy();

    const stats = fs.statSync(methodsPdfPath);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª: ${stats.size} –±–∞–π—Ç`);
  });

  test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä—è–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', async ({ page }) => {
    const timestamp = Date.now();

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
    const allMessages: string[] = [];
    page.on('console', msg => {
      const text = msg.text();
      if (text.includes('PDF') || 
          text.includes('—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') ||
          text.includes('–≠–¢–ê–ü') ||
          text.includes('–ú–ï–¢–û–î') ||
          text.includes('‚úÖ') ||
          text.includes('‚ùå')) {
        allMessages.push(text);
      }
    });

    const fileInput = page.locator('input[type="file"]');
    await fileInput.setInputFiles(realPdfPath);
    await page.waitForTimeout(5000);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    const reportData = {
      sender: '–û—Ç—á–µ—Ç –æ –ü—Ä—è–º–æ–º –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏',
      recipient: '–°–∏—Å—Ç–µ–º–∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      amount: '12345.67',
      purpose: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤'
    };

    const textInputs = page.locator('input[type="text"]');
    await textInputs.nth(0).fill(reportData.sender);
    
    if (await textInputs.nth(1).isVisible()) {
      await textInputs.nth(1).fill(reportData.recipient);
    }

    const inputCount = await textInputs.count();
    if (inputCount > 2) {
      await textInputs.nth(inputCount - 2).fill(reportData.amount);
    }

    const textarea = page.locator('textarea');
    if (await textarea.isVisible()) {
      await textarea.fill(reportData.purpose);
    }

    const downloadPromise = page.waitForEvent('download');
    const generateButton = page.locator('button').filter({ hasText: /PDF/i }).first();
    await generateButton.click();

    const download = await downloadPromise;
    const reportPdfPath = path.join(downloadsDir, `direct-edit-report-${timestamp}.pdf`);
    await download.saveAs(reportPdfPath);

    await page.waitForTimeout(5000);

    // –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
    const reportHtml = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –æ –ø—Ä—è–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PDF</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        .content {
            padding: 30px;
        }
        .section {
            background: #f8f9fa;
            padding: 20px;
            margin: 20px 0;
            border-radius: 10px;
            border-left: 4px solid #3498db;
        }
        .section h3 {
            color: #2c3e50;
            margin-top: 0;
        }
        .messages {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            max-height: 300px;
            overflow-y: auto;
        }
        .message {
            padding: 5px 0;
            font-family: monospace;
            font-size: 12px;
        }
        .success {
            color: #27ae60;
        }
        .error {
            color: #e74c3c;
        }
        .info {
            color: #3498db;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .stat-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            border: 1px solid #e9ecef;
        }
        .stat-card h4 {
            margin: 0 0 10px 0;
            color: #2c3e50;
        }
        .stat-card p {
            margin: 0;
            font-size: 1.2em;
            font-weight: bold;
            color: #3498db;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîß –û—Ç—á–µ—Ç –æ –ø—Ä—è–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PDF</h1>
            <p>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä—è–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è PDF –±–µ–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞</p>
            <p>–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}</p>
        </div>
        
        <div class="content">
            <div class="section">
                <h3>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="success">–°–∏—Å—Ç–µ–º–∞ –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞</span></p>
                <p><strong>PDF —Ñ–∞–π–ª:</strong> ${path.basename(reportPdfPath)}</p>
                <p><strong>–†–∞–∑–º–µ—Ä:</strong> ${Math.round(fs.statSync(reportPdfPath).size / 1024)} KB</p>
            </div>

            <div class="stats">
                <div class="stat-card">
                    <h4>üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π PDF</h4>
                    <p>${Math.round(fs.statSync(realPdfPath).size / 1024)} KB</p>
                </div>
                <div class="stat-card">
                    <h4>üìÑ –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π PDF</h4>
                    <p>${Math.round(fs.statSync(reportPdfPath).size / 1024)} KB</p>
                </div>
                <div class="stat-card">
                    <h4>üìù –ö–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</h4>
                    <p>${allMessages.length}</p>
                </div>
                <div class="stat-card">
                    <h4>üîß –ú–µ—Ç–æ–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
                    <p>3 –º–µ—Ç–æ–¥–∞</p>
                </div>
            </div>

            <div class="section">
                <h3>üîß –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
                <ul>
                    <li><strong>–ú–µ—Ç–æ–¥ 1:</strong> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF —Ñ–æ—Ä–º (–µ—Å–ª–∏ –µ—Å—Ç—å)</li>
                    <li><strong>–ú–µ—Ç–æ–¥ 2:</strong> –£–º–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –æ–±–ª–∞—Å—Ç–∏</li>
                    <li><strong>–ú–µ—Ç–æ–¥ 3:</strong> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π</li>
                    <li><strong>Fallback:</strong> –ù–∞–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –ø—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å)</li>
                </ul>
            </div>

            <div class="section">
                <h3>üìä –ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:</h3>
                <div class="messages">
                    ${allMessages.slice(0, 50).map(msg => {
                        let className = 'info';
                        if (msg.includes('‚úÖ') || msg.includes('–£–°–ü–ï–•')) className = 'success';
                        if (msg.includes('‚ùå') || msg.includes('–û—à–∏–±–∫–∞')) className = 'error';
                        return `<div class="message ${className}">${msg}</div>`;
                    }).join('')}
                    ${allMessages.length > 50 ? '<div class="message info">... –∏ –µ—â–µ ' + (allMessages.length - 50) + ' —Å–æ–æ–±—â–µ–Ω–∏–π</div>' : ''}
                </div>
            </div>

            <div class="section">
                <h3>üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
                <p>–°–∏—Å—Ç–µ–º–∞ –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å PDF –Ω–∞–ø—Ä—è–º—É—é, –∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ –Ω–∞–ª–æ–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.</p>
            </div>
        </div>
    </div>
</body>
</html>`;

    const htmlReportPath = path.join(screenshotsDir, `direct-edit-report-${timestamp}.html`);
    fs.writeFileSync(htmlReportPath, reportHtml);

    expect(fs.existsSync(htmlReportPath)).toBeTruthy();
    expect(fs.existsSync(reportPdfPath)).toBeTruthy();

    console.log('‚úÖ –û—Ç—á–µ—Ç –æ –ø—Ä—è–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω:');
    console.log(`   HTML –æ—Ç—á–µ—Ç: ${path.basename(htmlReportPath)}`);
    console.log(`   PDF —Ñ–∞–π–ª: ${path.basename(reportPdfPath)}`);
    console.log(`   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${allMessages.length}`);
  });
});
